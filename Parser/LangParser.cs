//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/superblaubeere27/Desktop/compilerTest/Compiler/Compiler\Lang.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class LangParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, NAME=9, 
		NUMBER=10, WHITESPACE=11, NEWLINE=12, ADD=13, SUBSTRACT=14, MULTIPLY=15, 
		DIVIDE=16, MODULO=17;
	public const int
		RULE_file = 0, RULE_method = 1, RULE_parameter_declaration = 2, RULE_block = 3, 
		RULE_statement = 4, RULE_return_statement = 5, RULE_expression = 6, RULE_paraphrase = 7;
	public static readonly string[] ruleNames = {
		"file", "method", "parameter_declaration", "block", "statement", "return_statement", 
		"expression", "paraphrase"
	};

	private static readonly string[] _LiteralNames = {
		null, "'def'", "'('", "','", "')'", "'{'", "'}'", "';'", "'return'", null, 
		null, null, null, "'+'", "'-'", "'*'", "'/'", "'%'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, "NAME", "NUMBER", 
		"WHITESPACE", "NEWLINE", "ADD", "SUBSTRACT", "MULTIPLY", "DIVIDE", "MODULO"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Lang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static LangParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public LangParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public LangParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class FileContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(LangParser.Eof, 0); }
		public MethodContext[] method() {
			return GetRuleContexts<MethodContext>();
		}
		public MethodContext method(int i) {
			return GetRuleContext<MethodContext>(i);
		}
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 19;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 16; method();
				}
				}
				State = 21;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 22; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(LangParser.NAME, 0); }
		public Parameter_declarationContext parameter_declaration() {
			return GetRuleContext<Parameter_declarationContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public MethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_method; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethod(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodContext method() {
		MethodContext _localctx = new MethodContext(Context, State);
		EnterRule(_localctx, 2, RULE_method);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24; Match(T__0);
			State = 25; Match(NAME);
			State = 26; parameter_declaration();
			State = 27; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Parameter_declarationContext : ParserRuleContext {
		public ITerminalNode[] NAME() { return GetTokens(LangParser.NAME); }
		public ITerminalNode NAME(int i) {
			return GetToken(LangParser.NAME, i);
		}
		public Parameter_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameter_declaration; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameter_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Parameter_declarationContext parameter_declaration() {
		Parameter_declarationContext _localctx = new Parameter_declarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_parameter_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 29; Match(T__1);
			State = 31;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NAME) {
				{
				State = 30; Match(NAME);
				}
			}

			State = 37;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 33; Match(T__2);
				State = 34; Match(NAME);
				}
				}
				State = 39;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 40; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 6, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42; Match(T__4);
			State = 46;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7) {
				{
				{
				State = 43; statement();
				}
				}
				State = 48;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 49; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public ITerminalNode NEWLINE() { return GetToken(LangParser.NEWLINE, 0); }
		public Return_statementContext return_statement() {
			return GetRuleContext<Return_statementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 8, RULE_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 51; return_statement();
			}
			State = 52;
			_la = TokenStream.LA(1);
			if ( !(_la==T__6 || _la==NEWLINE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_statementContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturn_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Return_statementContext return_statement() {
		Return_statementContext _localctx = new Return_statementContext(Context, State);
		EnterRule(_localctx, 10, RULE_return_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54; Match(T__7);
			State = 55; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ParaphraseContext paraphrase() {
			return GetRuleContext<ParaphraseContext>(0);
		}
		public ITerminalNode NUMBER() { return GetToken(LangParser.NUMBER, 0); }
		public ITerminalNode NAME() { return GetToken(LangParser.NAME, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode MULTIPLY() { return GetToken(LangParser.MULTIPLY, 0); }
		public ITerminalNode DIVIDE() { return GetToken(LangParser.DIVIDE, 0); }
		public ITerminalNode MODULO() { return GetToken(LangParser.MODULO, 0); }
		public ITerminalNode ADD() { return GetToken(LangParser.ADD, 0); }
		public ITerminalNode SUBSTRACT() { return GetToken(LangParser.SUBSTRACT, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				{
				State = 58; paraphrase();
				}
				break;
			case NUMBER:
				{
				State = 59; Match(NUMBER);
				}
				break;
			case NAME:
				{
				State = 60; Match(NAME);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 80;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 78;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 63;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 64; Match(MULTIPLY);
						State = 65; expression(8);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 66;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 67; Match(DIVIDE);
						State = 68; expression(7);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 69;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 70; Match(MODULO);
						State = 71; expression(6);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 72;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 73; Match(ADD);
						State = 74; expression(5);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 75;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 76; Match(SUBSTRACT);
						State = 77; expression(4);
						}
						break;
					}
					} 
				}
				State = 82;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParaphraseContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParaphraseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paraphrase; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ILangVisitor<TResult> typedVisitor = visitor as ILangVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParaphrase(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParaphraseContext paraphrase() {
		ParaphraseContext _localctx = new ParaphraseContext(Context, State);
		EnterRule(_localctx, 14, RULE_paraphrase);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83; Match(T__1);
			State = 84; expression(0);
			State = 85; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 6: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 7);
		case 1: return Precpred(Context, 6);
		case 2: return Precpred(Context, 5);
		case 3: return Precpred(Context, 4);
		case 4: return Precpred(Context, 3);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x13', 'Z', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x3', '\x2', '\a', '\x2', '\x14', '\n', '\x2', 
		'\f', '\x2', '\xE', '\x2', '\x17', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\"', '\n', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\a', '\x4', '&', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 
		')', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\a', '\x5', '/', '\n', '\x5', '\f', '\x5', '\xE', '\x5', '\x32', '\v', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x5', '\b', '@', '\n', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\a', '\b', 'Q', '\n', '\b', '\f', '\b', 
		'\xE', '\b', 'T', '\v', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x2', '\x3', '\xE', '\n', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x2', '\x3', '\x4', '\x2', '\t', '\t', '\xE', 
		'\xE', '\x2', '\\', '\x2', '\x15', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\x1A', '\x3', '\x2', '\x2', '\x2', '\x6', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\b', ',', '\x3', '\x2', '\x2', '\x2', '\n', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '\f', '\x38', '\x3', '\x2', '\x2', '\x2', '\xE', '?', '\x3', 
		'\x2', '\x2', '\x2', '\x10', 'U', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\x14', '\x5', '\x4', '\x3', '\x2', '\x13', '\x12', '\x3', '\x2', '\x2', 
		'\x2', '\x14', '\x17', '\x3', '\x2', '\x2', '\x2', '\x15', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x15', '\x16', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\x18', '\x3', '\x2', '\x2', '\x2', '\x17', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\x19', '\a', '\x2', '\x2', '\x3', '\x19', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\x1B', '\a', '\x3', '\x2', '\x2', '\x1B', 
		'\x1C', '\a', '\v', '\x2', '\x2', '\x1C', '\x1D', '\x5', '\x6', '\x4', 
		'\x2', '\x1D', '\x1E', '\x5', '\b', '\x5', '\x2', '\x1E', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x1F', '!', '\a', '\x4', '\x2', '\x2', ' ', '\"', 
		'\a', '\v', '\x2', '\x2', '!', ' ', '\x3', '\x2', '\x2', '\x2', '!', '\"', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\'', '\x3', '\x2', '\x2', '\x2', '#', 
		'$', '\a', '\x5', '\x2', '\x2', '$', '&', '\a', '\v', '\x2', '\x2', '%', 
		'#', '\x3', '\x2', '\x2', '\x2', '&', ')', '\x3', '\x2', '\x2', '\x2', 
		'\'', '%', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\x3', '\x2', '\x2', 
		'\x2', '(', '*', '\x3', '\x2', '\x2', '\x2', ')', '\'', '\x3', '\x2', 
		'\x2', '\x2', '*', '+', '\a', '\x6', '\x2', '\x2', '+', '\a', '\x3', '\x2', 
		'\x2', '\x2', ',', '\x30', '\a', '\a', '\x2', '\x2', '-', '/', '\x5', 
		'\n', '\x6', '\x2', '.', '-', '\x3', '\x2', '\x2', '\x2', '/', '\x32', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '.', '\x3', '\x2', '\x2', '\x2', '\x30', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\x31', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x32', '\x30', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\a', 
		'\b', '\x2', '\x2', '\x34', '\t', '\x3', '\x2', '\x2', '\x2', '\x35', 
		'\x36', '\x5', '\f', '\a', '\x2', '\x36', '\x37', '\t', '\x2', '\x2', 
		'\x2', '\x37', '\v', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\a', 
		'\n', '\x2', '\x2', '\x39', ':', '\x5', '\xE', '\b', '\x2', ':', '\r', 
		'\x3', '\x2', '\x2', '\x2', ';', '<', '\b', '\b', '\x1', '\x2', '<', '@', 
		'\x5', '\x10', '\t', '\x2', '=', '@', '\a', '\f', '\x2', '\x2', '>', '@', 
		'\a', '\v', '\x2', '\x2', '?', ';', '\x3', '\x2', '\x2', '\x2', '?', '=', 
		'\x3', '\x2', '\x2', '\x2', '?', '>', '\x3', '\x2', '\x2', '\x2', '@', 
		'R', '\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\f', '\t', '\x2', '\x2', 
		'\x42', '\x43', '\a', '\x11', '\x2', '\x2', '\x43', 'Q', '\x5', '\xE', 
		'\b', '\n', '\x44', '\x45', '\f', '\b', '\x2', '\x2', '\x45', '\x46', 
		'\a', '\x12', '\x2', '\x2', '\x46', 'Q', '\x5', '\xE', '\b', '\t', 'G', 
		'H', '\f', '\a', '\x2', '\x2', 'H', 'I', '\a', '\x13', '\x2', '\x2', 'I', 
		'Q', '\x5', '\xE', '\b', '\b', 'J', 'K', '\f', '\x6', '\x2', '\x2', 'K', 
		'L', '\a', '\xF', '\x2', '\x2', 'L', 'Q', '\x5', '\xE', '\b', '\a', 'M', 
		'N', '\f', '\x5', '\x2', '\x2', 'N', 'O', '\a', '\x10', '\x2', '\x2', 
		'O', 'Q', '\x5', '\xE', '\b', '\x6', 'P', '\x41', '\x3', '\x2', '\x2', 
		'\x2', 'P', '\x44', '\x3', '\x2', '\x2', '\x2', 'P', 'G', '\x3', '\x2', 
		'\x2', '\x2', 'P', 'J', '\x3', '\x2', '\x2', '\x2', 'P', 'M', '\x3', '\x2', 
		'\x2', '\x2', 'Q', 'T', '\x3', '\x2', '\x2', '\x2', 'R', 'P', '\x3', '\x2', 
		'\x2', '\x2', 'R', 'S', '\x3', '\x2', '\x2', '\x2', 'S', '\xF', '\x3', 
		'\x2', '\x2', '\x2', 'T', 'R', '\x3', '\x2', '\x2', '\x2', 'U', 'V', '\a', 
		'\x4', '\x2', '\x2', 'V', 'W', '\x5', '\xE', '\b', '\x2', 'W', 'X', '\a', 
		'\x6', '\x2', '\x2', 'X', '\x11', '\x3', '\x2', '\x2', '\x2', '\t', '\x15', 
		'!', '\'', '\x30', '?', 'P', 'R',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Parser
