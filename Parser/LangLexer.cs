//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/superblaubeere27/Desktop/compilerTest/Compiler/Compiler\Lang.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Parser {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class LangLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, NAME=11, NUMBER=12, WHITESPACE=13, NEWLINE=14, ADD=15, SUBSTRACT=16, 
		MULTIPLY=17, DIVIDE=18, MODULO=19;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "NAME", "NUMBER", "WHITESPACE", "NEWLINE", "ADD", "SUBSTRACT", 
		"MULTIPLY", "DIVIDE", "MODULO"
	};


	public LangLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public LangLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'def'", "'('", "','", "')'", "'{'", "'}'", "'var'", "'='", "';'", 
		"'return'", null, null, null, null, "'+'", "'-'", "'*'", "'/'", "'%'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, "NAME", 
		"NUMBER", "WHITESPACE", "NEWLINE", "ADD", "SUBSTRACT", "MULTIPLY", "DIVIDE", 
		"MODULO"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Lang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static LangLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x2', '\x15', 'm', '\b', '\x1', '\x4', '\x2', '\t', '\x2', 
		'\x4', '\x3', '\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', 
		'\x5', '\x4', '\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', 
		'\t', '\b', '\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', 
		'\t', '\v', '\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', 
		'\t', '\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\f', '\x3', '\f', '\a', '\f', 'I', '\n', '\f', '\f', '\f', '\xE', 
		'\f', 'L', '\v', '\f', '\x3', '\r', '\x5', '\r', 'O', '\n', '\r', '\x3', 
		'\r', '\x6', '\r', 'R', '\n', '\r', '\r', '\r', '\xE', '\r', 'S', '\x3', 
		'\xE', '\x6', '\xE', 'W', '\n', '\xE', '\r', '\xE', '\xE', '\xE', 'X', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x6', '\xF', '^', '\n', '\xF', 
		'\r', '\xF', '\xE', '\xF', '_', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x2', '\x2', 
		'\x15', '\x3', '\x3', '\x5', '\x4', '\a', '\x5', '\t', '\x6', '\v', '\a', 
		'\r', '\b', '\xF', '\t', '\x11', '\n', '\x13', '\v', '\x15', '\f', '\x17', 
		'\r', '\x19', '\xE', '\x1B', '\xF', '\x1D', '\x10', '\x1F', '\x11', '!', 
		'\x12', '#', '\x13', '%', '\x14', '\'', '\x15', '\x3', '\x2', '\b', '\x5', 
		'\x2', '\x43', '\\', '\x61', '\x61', '\x63', '|', '\x6', '\x2', '\x32', 
		';', '\x43', '\\', '\x61', '\x61', '\x63', '|', '\x4', '\x2', '-', '-', 
		'/', '/', '\x4', '\x2', '\x32', ';', '\x61', '\x61', '\x4', '\x2', '\v', 
		'\v', '\"', '\"', '\x4', '\x2', '\f', '\f', '\xF', '\xF', '\x2', 'q', 
		'\x2', '\x3', '\x3', '\x2', '\x2', '\x2', '\x2', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\a', '\x3', '\x2', '\x2', '\x2', '\x2', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '\v', '\x3', '\x2', '\x2', '\x2', '\x2', '\r', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x11', '\x3', '\x2', '\x2', '\x2', '\x2', '\x13', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x15', '\x3', '\x2', '\x2', '\x2', '\x2', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x2', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x2', '\x1D', '\x3', '\x2', 
		'\x2', '\x2', '\x2', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x2', '!', '\x3', 
		'\x2', '\x2', '\x2', '\x2', '#', '\x3', '\x2', '\x2', '\x2', '\x2', '%', 
		'\x3', '\x2', '\x2', '\x2', '\x2', '\'', '\x3', '\x2', '\x2', '\x2', '\x3', 
		')', '\x3', '\x2', '\x2', '\x2', '\x5', '-', '\x3', '\x2', '\x2', '\x2', 
		'\a', '/', '\x3', '\x2', '\x2', '\x2', '\t', '\x31', '\x3', '\x2', '\x2', 
		'\x2', '\v', '\x33', '\x3', '\x2', '\x2', '\x2', '\r', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\xF', '\x37', '\x3', '\x2', '\x2', '\x2', '\x11', 
		';', '\x3', '\x2', '\x2', '\x2', '\x13', '=', '\x3', '\x2', '\x2', '\x2', 
		'\x15', '?', '\x3', '\x2', '\x2', '\x2', '\x17', '\x46', '\x3', '\x2', 
		'\x2', '\x2', '\x19', 'N', '\x3', '\x2', '\x2', '\x2', '\x1B', 'V', '\x3', 
		'\x2', '\x2', '\x2', '\x1D', ']', '\x3', '\x2', '\x2', '\x2', '\x1F', 
		'\x63', '\x3', '\x2', '\x2', '\x2', '!', '\x65', '\x3', '\x2', '\x2', 
		'\x2', '#', 'g', '\x3', '\x2', '\x2', '\x2', '%', 'i', '\x3', '\x2', '\x2', 
		'\x2', '\'', 'k', '\x3', '\x2', '\x2', '\x2', ')', '*', '\a', '\x66', 
		'\x2', '\x2', '*', '+', '\a', 'g', '\x2', '\x2', '+', ',', '\a', 'h', 
		'\x2', '\x2', ',', '\x4', '\x3', '\x2', '\x2', '\x2', '-', '.', '\a', 
		'*', '\x2', '\x2', '.', '\x6', '\x3', '\x2', '\x2', '\x2', '/', '\x30', 
		'\a', '.', '\x2', '\x2', '\x30', '\b', '\x3', '\x2', '\x2', '\x2', '\x31', 
		'\x32', '\a', '+', '\x2', '\x2', '\x32', '\n', '\x3', '\x2', '\x2', '\x2', 
		'\x33', '\x34', '\a', '}', '\x2', '\x2', '\x34', '\f', '\x3', '\x2', '\x2', 
		'\x2', '\x35', '\x36', '\a', '\x7F', '\x2', '\x2', '\x36', '\xE', '\x3', 
		'\x2', '\x2', '\x2', '\x37', '\x38', '\a', 'x', '\x2', '\x2', '\x38', 
		'\x39', '\a', '\x63', '\x2', '\x2', '\x39', ':', '\a', 't', '\x2', '\x2', 
		':', '\x10', '\x3', '\x2', '\x2', '\x2', ';', '<', '\a', '?', '\x2', '\x2', 
		'<', '\x12', '\x3', '\x2', '\x2', '\x2', '=', '>', '\a', '=', '\x2', '\x2', 
		'>', '\x14', '\x3', '\x2', '\x2', '\x2', '?', '@', '\a', 't', '\x2', '\x2', 
		'@', '\x41', '\a', 'g', '\x2', '\x2', '\x41', '\x42', '\a', 'v', '\x2', 
		'\x2', '\x42', '\x43', '\a', 'w', '\x2', '\x2', '\x43', '\x44', '\a', 
		't', '\x2', '\x2', '\x44', '\x45', '\a', 'p', '\x2', '\x2', '\x45', '\x16', 
		'\x3', '\x2', '\x2', '\x2', '\x46', 'J', '\t', '\x2', '\x2', '\x2', 'G', 
		'I', '\t', '\x3', '\x2', '\x2', 'H', 'G', '\x3', '\x2', '\x2', '\x2', 
		'I', 'L', '\x3', '\x2', '\x2', '\x2', 'J', 'H', '\x3', '\x2', '\x2', '\x2', 
		'J', 'K', '\x3', '\x2', '\x2', '\x2', 'K', '\x18', '\x3', '\x2', '\x2', 
		'\x2', 'L', 'J', '\x3', '\x2', '\x2', '\x2', 'M', 'O', '\t', '\x4', '\x2', 
		'\x2', 'N', 'M', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\x3', '\x2', '\x2', 
		'\x2', 'O', 'Q', '\x3', '\x2', '\x2', '\x2', 'P', 'R', '\t', '\x5', '\x2', 
		'\x2', 'Q', 'P', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'Q', '\x3', '\x2', '\x2', '\x2', 'S', 'T', '\x3', '\x2', '\x2', 
		'\x2', 'T', '\x1A', '\x3', '\x2', '\x2', '\x2', 'U', 'W', '\t', '\x6', 
		'\x2', '\x2', 'V', 'U', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\x3', '\x2', 
		'\x2', '\x2', 'X', 'V', '\x3', '\x2', '\x2', '\x2', 'X', 'Y', '\x3', '\x2', 
		'\x2', '\x2', 'Y', 'Z', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\b', '\xE', 
		'\x2', '\x2', '[', '\x1C', '\x3', '\x2', '\x2', '\x2', '\\', '^', '\t', 
		'\a', '\x2', '\x2', ']', '\\', '\x3', '\x2', '\x2', '\x2', '^', '_', '\x3', 
		'\x2', '\x2', '\x2', '_', ']', '\x3', '\x2', '\x2', '\x2', '_', '`', '\x3', 
		'\x2', '\x2', '\x2', '`', '\x61', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'\x62', '\b', '\xF', '\x2', '\x2', '\x62', '\x1E', '\x3', '\x2', '\x2', 
		'\x2', '\x63', '\x64', '\a', '-', '\x2', '\x2', '\x64', ' ', '\x3', '\x2', 
		'\x2', '\x2', '\x65', '\x66', '\a', '/', '\x2', '\x2', '\x66', '\"', '\x3', 
		'\x2', '\x2', '\x2', 'g', 'h', '\a', ',', '\x2', '\x2', 'h', '$', '\x3', 
		'\x2', '\x2', '\x2', 'i', 'j', '\a', '\x31', '\x2', '\x2', 'j', '&', '\x3', 
		'\x2', '\x2', '\x2', 'k', 'l', '\a', '\'', '\x2', '\x2', 'l', '(', '\x3', 
		'\x2', '\x2', '\x2', '\b', '\x2', 'J', 'N', 'S', 'X', '_', '\x3', '\b', 
		'\x2', '\x2',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Parser
